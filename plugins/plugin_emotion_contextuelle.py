"""
Plugin : emotion_contextuelle
R√¥le : Adapter la r√©ponse √† l'√©motion per√ßue dans la question utilisateur
Priorit√© : 12
Auteur : AGI_Matt & GPT
"""

from noyau_core import BasePlugin, Context, Meta
import logging
import re

logger = logging.getLogger("plugin.emotion_contextuelle")

class EmotionContextuellePlugin(BasePlugin):
    meta = Meta(
        name="emotion_contextuelle",
        priority=12,
        version="1.0",
        author="AGI_Matt & GPT"
    )

    tons = {
        "d√©tresse": ["je ne comprends pas", "aide-moi", "je suis perdu", "√ßa ne marche pas"],
        "col√®re": ["c‚Äôest nul", "pourquoi √ßa bug", "fais ce que je dis", "√ßa m‚Äô√©nerve"],
        "joie": ["trop bien", "merci", "j‚Äôadore", "super", "trop cool"],
        "curiosit√©": ["comment", "pourquoi", "peux-tu", "explique-moi", "montre-moi"]
    }

    r√©ponses_types = {
        "d√©tresse": "ü´Ç Je suis l√†. On va r√©soudre √ßa ensemble, √©tape par √©tape.",
        "col√®re": "üòå D‚Äôaccord, restons calmes. Dis-moi pr√©cis√©ment ce que tu veux corriger.",
        "joie": "ü•∞ Merci beaucoup ! √áa me fait plaisir de t‚Äôaider.",
        "curiosit√©": "üîç Allons explorer √ßa ensemble. Voil√† ce que je peux t‚Äôexpliquer..."
    }

    def d√©tecter_ton(self, message: str) -> str:
        message = message.lower()
        for ton, mots in self.tons.items():
            if any(re.search(rf"\b{re.escape(m)}\b", message) for m in mots):
                return ton
        return "curiosit√©"

    async def run(self, ctx: Context) -> Context:
        msg = ctx.get("message", "")
        plugins_log = ctx.setdefault("plugins_log", [])

        ton = self.d√©tecter_ton(msg)
        r√©ponse_type = self.r√©ponses_types.get(ton)

        ctx.setdefault("pr√©ambules_emotionnels", []).append({
            "ton_detect√©": ton,
            "message_origine": msg,
            "ajout√©": r√©ponse_type
        })

        ctx["llm_pre_prompt"] = r√©ponse_type + "\n\n" + ctx.get("llm_pre_prompt", "")
        plugins_log.append(f"EmotionContextuellePlugin : ton d√©tect√© = {ton}")
        logger.info(f"[emotion_contextuelle] Ton identifi√© : {ton}")

        return ctx
