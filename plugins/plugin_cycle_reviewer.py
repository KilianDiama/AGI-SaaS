from noyau_core import BasePlugin, Context, Meta
import logging
import json

logger = logging.getLogger("plugin.cycle_reviewer")

class PluginCycleReviewer(BasePlugin):
    meta = Meta(
        name="plugin_cycle_reviewer",
        version="1.0",
        priority=5.0,  # √Ä ex√©cuter apr√®s tout le reste, pour review compl√®te
        author="Toi & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        try:
            plugins = ctx.get("plugins_log", [])
            response = ctx.get("llm_response", ctx.get("llm_response_vot√©e", ""))
            objectif = ctx.get("objectif", {}).get("but", "inconnu")
            intention = ctx.get("intention", "inconnue")
            erreurs = ctx.get("errors", [])
            reflex = ctx.get("reflexion_interne", "")
            analyse = ctx.get("analysis_feedback", "")
            plan = ctx.get("plan", [])
            temps = ctx.get("ts_start", "?") + " ‚Üí " + ctx.get("ts_end", "?")

            lignes = [
                "üß© **Cycle LLM Review**",
                f"üìå Objectif : {objectif}",
                f"üéØ Intention d√©tect√©e : {intention}",
                f"üïì Dur√©e : {temps}",
                "",
                "üõ†Ô∏è **Plugins ex√©cut√©s** :",
                "\n".join(f"‚Ä¢ {log}" for log in plugins[-10:]),
                "",
                "‚ö†Ô∏è **Erreurs d√©tect√©es** :" if erreurs else "‚úÖ Aucune erreur d√©tect√©e.",
            ]

            if erreurs:
                lignes += [f"- {err['plugin']} : {err['error']}" for err in erreurs]

            if reflex:
                lignes += ["", "üß† R√©flexion interne :", reflex]

            if analyse:
                lignes += ["", "üîé Analyse :", analyse]

            if plan:
                lignes += ["", "üß≠ Plan suivi :"]
                lignes += [f"‚Ä¢ {step['√©tape']} ({step['status']})" for step in plan]

            lignes += ["", "üì§ **R√©ponse finale** :", response[:500] + ("..." if len(response) > 500 else "")]

            ctx["cycle_review_summary"] = "\n".join(lignes)
            ctx.setdefault("plugins_log", []).append("PluginCycleReviewer : synth√®se du cycle g√©n√©r√©e.")
            logger.info("[cycle_reviewer] Synth√®se du cycle cr√©√©e.")
        except Exception as e:
            logger.warning(f"[cycle_reviewer] Erreur : {e}")
            ctx.setdefault("plugins_log", []).append(f"PluginCycleReviewer : erreur ‚Üí {e}")

        return ctx
