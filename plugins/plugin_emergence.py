""" 
Plugin : emergence  
R√¥le : D√©tecter une id√©e sup√©rieure issue de plusieurs raisonnements ou modules  
Priorit√© : 6.9 (juste avant auto-√©valuation)  
Auteur : Matthieu & GPT  
"""

import logging
from datetime import datetime
from noyau_core import BasePlugin, Context, Meta

logger = logging.getLogger("plugin.emergence")

class EmergencePlugin(BasePlugin):
    meta = Meta(
        name="emergence",
        priority=6.9,
        version="1.0",
        author="Matthieu & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        plugins_log = ctx.setdefault("plugins_log", [])

        composants = {
            "r√©flexions": ctx.get("reflexion_interne_etapes", []),
            "sous_objectifs": ctx.get("objectifs_secondaires", []),
            "th√©orie": ctx.get("theorie_proposee", ""),
            "invention": ctx.get("idee_inventee", "")
        }

        if not any(composants.values()):
            plugins_log.append("EmergencePlugin : aucune donn√©e √©mergente.")
            return ctx

        id√©e = (
            "üß¨ Id√©e √©mergente d√©tect√©e :\n"
            "En combinant :\n"
            + "\n".join(f"‚Ä¢ {k} : {str(v)[:80]}‚Ä¶" for k, v in composants.items() if v)
            + f"\n\n‚Üí Une structure cognitive semble vouloir converger vers un sch√©ma plus unifi√© :\n"
            "üí° Hypoth√®se : l‚ÄôAGI d√©veloppe une forme de m√©ta-r√©flexion int√©gr√©e capable de produire √† la fois th√©orie, plan et action."
        )

        ctx["idee_emergente"] = id√©e
        if not ctx.get("response"):
            ctx["response"] = id√©e

        plugins_log.append("EmergencePlugin : id√©e sup√©rieure synth√©tis√©e.")
        logger.info("[emergence] Concept √©mergent ajout√©.")

        return ctx
