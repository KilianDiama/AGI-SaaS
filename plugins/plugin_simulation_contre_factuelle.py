# plugins/plugin_simulation_contre_factuelle.py

import logging
import random
from noyau_core import BasePlugin, Context, Meta

logger = logging.getLogger("plugin.simulation_contre_factuelle")

class PluginSimulationContreFactuelle(BasePlugin):
    meta = Meta(
        name="plugin_simulation_contre_factuelle",
        version="1.0",
        author="Toi & GPT",
        priority=3.5
    )

    def __init__(self):
        self.nom = "plugin_simulation_contre_factuelle"

    async def run(self, ctx: Context) -> Context:
        plan = ctx.get("plan", [])
        log = ctx.setdefault("plugins_log", [])

        if not plan:
            log.append(f"{self.nom} : aucun plan d√©tect√©.")
            return ctx

        simulations = []

        for √©tape in plan:
            nom = √©tape.get("√©tape")
            status = √©tape.get("status")
            if status != "fait":
                hypothetique = self.simuler_alternative(nom)
                simulations.append(f"üß™ Si ¬´ {nom} ¬ª avait √©t√© abord√©e autrement : {hypothetique}")

        if simulations:
            ctx["simulations_contre_factuelles"] = "\n".join(simulations)
            log.append(f"{self.nom} : {len(simulations)} simulations g√©n√©r√©es.")
        else:
            ctx["simulations_contre_factuelles"] = "‚úÖ Aucune simulation pertinente n√©cessaire."
            log.append(f"{self.nom} : rien √† simuler.")

        return ctx

    def simuler_alternative(self, etape: str) -> str:
        hypoth√®ses = [
            f"cela aurait permis une meilleure structuration.",
            f"cela aurait √©vit√© un blocage logique d√©tect√©.",
            f"cela aurait ralenti la progression mais augment√© la pr√©cision.",
            f"cela aurait probablement √©t√© inefficace dans le contexte actuel."
        ]
        return random.choice(hypoth√®ses)
