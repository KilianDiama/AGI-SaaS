# plugins/plugin_meta_simulation.py

"""
Plugin : meta_simulation
RÃ´le   : GÃ©nÃ¨re et compare plusieurs variantes mentales (rÃ©ponses alternatives) pour choisir la plus adaptÃ©e
PrioritÃ© : 92 (aprÃ¨s objections / Ã©mergence logique)
Auteur  : Toi + GPT
"""

import logging
from random import randint
from noyau_core import BasePlugin, Context, Meta

logger = logging.getLogger("plugin.meta_simulation")

class MetaSimulationPlugin(BasePlugin):
    meta = Meta(
        name="meta_simulation",
        priority=92,
        version="1.0",
        author="Toi + GPT"
    )

    async def run(self, ctx: Context) -> Context:
        log = ctx.setdefault("plugins_log", [])
        message = ctx.get("message", "")
        reponse_base = ctx.get("llm_response", "")
        variantes = []

        if not reponse_base.strip():
            log.append("MetaSimulationPlugin : rÃ©ponse initiale absente, skip simulation.")
            return ctx

        # GÃ©nÃ¨re 3 variantes fictives (remplacer par appels rÃ©els Ã  diffÃ©rents prompts ou styles)
        for i in range(3):
            variante = f"ğŸ§  Variante {i+1} â€” hypothÃ¨se gÃ©nÃ©rÃ©e sur la base de : Â« {message[:50]}... Â»"
            variante += f"\n{reponse_base} (version modifiÃ©e nÂ°{i+1})"
            variantes.append({
                "contenu": variante,
                "score_simule": randint(60, 95)  # Simule un score pour comparaison
            })

        # SÃ©lectionne la meilleure
        meilleure = max(variantes, key=lambda v: v["score_simule"])
        ctx["meta_variantes"] = variantes
        ctx["meta_choix_final"] = meilleure["contenu"]

        log.append(f"MetaSimulationPlugin : {len(variantes)} variantes gÃ©nÃ©rÃ©es, score max = {meilleure['score_simule']}")
        logger.info("[meta_simulation] Meilleure variante sÃ©lectionnÃ©e.")

        return ctx
