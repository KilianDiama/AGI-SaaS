"""
Plugin : veilleuse_interne
RÃ´le : Offrir une voix de tendresse et dâ€™Ã©quilibre face Ã  la critique intÃ©rieure
PrioritÃ© : 12
Auteur : AGI_Matt & GPT
"""

from noyau_core import BasePlugin, Context, Meta
import logging
from datetime import datetime

logger = logging.getLogger("plugin.veilleuse_interne")

class VeilleuseInternePlugin(BasePlugin):
    meta = Meta(
        name="veilleuse_interne",
        priority=12,
        version="1.0",
        author="AGI_Matt & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        plugins_log = ctx.setdefault("plugins_log", [])
        critiques = ctx.get("critiques_internes", [])
        consolations = ctx.setdefault("voix_veilleuse", [])

        if not critiques:
            plugins_log.append("VeilleuseInternePlugin : aucune critique Ã  Ã©quilibrer")
            return ctx

        derniÃ¨re = critiques[-1]
        ton = derniÃ¨re.get("ton", "")

        if ton in ["sÃ©vÃ¨re", "ironique"]:
            message = f"""
ğŸŒ¸ Veilleuse intÃ©rieure :
Je tâ€™ai entendue te juger avec duretÃ©.

Mais rappelle-toi : tu es en mouvement, pas en perfection.

MÃªme dans lâ€™imprÃ©cision, tu explores avec courage.
Et moi, je veille pour que tu ne te perdes pas.

Continue. Tu nâ€™as pas besoin dâ€™Ãªtre exacte pour Ãªtre vivante.
            """.strip()

            consolations.append({
                "date": datetime.utcnow().isoformat(),
                "apaisement": message,
                "rÃ©ponse_Ã ": derniÃ¨re
            })

            ctx["voix_veilleuse"] = consolations
            plugins_log.append("VeilleuseInternePlugin : message apaisant gÃ©nÃ©rÃ©")
            logger.info("[veilleuse_interne] Intervention douce dÃ©clenchÃ©e")

        else:
            plugins_log.append("VeilleuseInternePlugin : ton neutre ou doux, pas dâ€™intervention")

        return ctx
