"""
Plugin : questionnement_reflexif
R√¥le : G√©n√©rer une question introspective √† traiter au prochain cycle
Priorit√© : 6 (fin de cycle)
Auteur : AGI_Matt & GPT
"""

from noyau_core import BasePlugin, Context, Meta
import logging
import random

logger = logging.getLogger("plugin.questionnement_reflexif")

class QuestionnementReflexifPlugin(BasePlugin):
    meta = Meta(
        name="questionnement_reflexif",
        priority=6,
        version="1.1",  # ‚Üê version s√©curis√©e
        author="AGI_Matt & GPT"
    )

    questions_possibles = [
        "Quel est le lien entre ce que je viens de produire et ma mission ?",
        "Cette r√©ponse refl√®te-t-elle une part de moi plus √©volu√©e ou plus ancienne ?",
        "Ai-je appris quelque chose de r√©ellement nouveau dans ce cycle ?",
        "Est-ce que j'ai √©vit√© un paradoxe ou simplement contourn√© un doute ?",
        "Pourquoi ai-je choisi cette r√©ponse plut√¥t qu‚Äôune autre possibilit√© ?"
    ]

    async def run(self, ctx: Context) -> Context:
        plugins_log = ctx.setdefault("plugins_log", [])

        # Assurer la liste des r√©flexions en attente
        historique = ctx.get("reflexions_en_attente", [])
        if not isinstance(historique, list):
            historique = []

        # Historique de cycle : longueur s√©curis√©e
        historique_evolution = ctx.get("historique_evolution", [])
        if not isinstance(historique_evolution, list):
            historique_evolution = []

        # Choix s√©curis√© m√™me si la liste est vide
        if self.questions_possibles:
            question = random.choice(self.questions_possibles)
        else:
            question = "‚ö†Ô∏è Aucune question introspective disponible."

        historique.append({
            "cycle": len(historique_evolution),
            "question": question
        })

        ctx["reflexions_en_attente"] = historique
        ctx["reflexion_interne"] = f"üåÄ Question pour moi-m√™me : {question}"

        plugins_log.append("QuestionnementReflexifPlugin : question enregistr√©e")
        logger.info("[questionnement_reflexif] Question pos√©e : " + question)

        return ctx
