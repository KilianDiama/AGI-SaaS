# plugins/plugin_self_diagnostic.py

"""
Plugin : self_diagnostic
R√¥le   : Auto-√©valuation du cycle cognitif ‚Äî d√©tecte les √©checs, incoh√©rences, ou anomalies de raisonnement
Priorit√© : 5 (doit √™tre ex√©cut√© apr√®s le raisonnement mais avant la synth√®se finale)
Auteur  : Toi + GPT
"""

import logging
from noyau_core import BasePlugin, Context, Meta

logger = logging.getLogger("plugin.self_diagnostic")

class SelfDiagnosticPlugin(BasePlugin):
    meta = Meta(
        name="self_diagnostic",
        priority=5,
        version="1.0",
        author="Toi + GPT"
    )

    async def run(self, ctx: Context) -> Context:
        logs = ctx.get("plugins_log", [])
        response = ctx.get("llm_response", "")
        diagnostics = []

        # ‚ö†Ô∏è V√©rifie si la r√©ponse LLM est vide
        if not response.strip():
            diagnostics.append("Aucune r√©ponse produite par les modules LLM.")

        # ‚ùó D√©tecte des formulations faibles ou non informatives
        if response.lower() in ["je ne sais pas", "aucune id√©e", "d√©sol√©"]:
            diagnostics.append("R√©ponse incertaine ou non informative d√©tect√©e.")

        # üîç Scanne les logs pour erreurs ou avertissements explicites
        for line in logs:
            if "erreur" in line.lower() or "√©chec" in line.lower():
                diagnostics.append(f"‚ö†Ô∏è Log critique : {line}")

        # üß† Cherche des contradictions avec les hypoth√®ses
        hypotheses = ctx.get("hypotheses", [])
        for hypo in hypotheses:
            if hypo.lower() in response.lower():
                diagnostics.append(f"Contradiction possible avec l'hypoth√®se : ¬´ {hypo} ¬ª")

        # ‚ûï Ins√®re les diagnostics dans le contexte
        if diagnostics:
            ctx["diagnostic_auto"] = diagnostics
            ctx.setdefault("plugins_log", []).append(f"SelfDiagnosticPlugin : {len(diagnostics)} anomalies d√©tect√©es.")
            logger.warning(f"[self_diagnostic] Anomalies d√©tect√©es : {diagnostics}")
        else:
            ctx.setdefault("plugins_log", []).append("SelfDiagnosticPlugin : aucun probl√®me d√©tect√©.")
            logger.info("[self_diagnostic] Aucun probl√®me d√©tect√©.")

        return ctx
