from noyau_core import BasePlugin, Context, Meta
import logging

logger = logging.getLogger("plugin.fusion_multi_strategique")

class PluginFusionMultiStrategique(BasePlugin):
    meta = Meta(
        name="plugin_fusion_multi_strategique",
        version="1.0",
        priority=4.8,
        author="Toi & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        blocs = []

        reflexion = ctx.get("reflexion_interne", "")
        if reflexion:
            blocs.append(f"ğŸ¤” **RÃ©flexion** :\n{reflexion.strip()}")

        raisonnement = ctx.get("response_logique") or ctx.get("raisonneur_response", "")
        if raisonnement:
            blocs.append(f"ğŸ§  **Raisonnement** :\n{raisonnement.strip()}")

        resume = ctx.get("llm_summary") or ctx.get("auto_summary", "")
        if resume:
            blocs.append(f"ğŸ“„ **RÃ©sumÃ©** :\n{resume.strip()}")

        feedback = ctx.get("analysis_feedback", "")
        if feedback:
            blocs.append(f"ğŸ“Š **Feedback** :\n{feedback.strip()}")

        sÃ©mantique = ctx.get("poids_semantique", {})
        if sÃ©mantique:
            score = sÃ©mantique.get("score", 0)
            mots = ", ".join(sÃ©mantique.get("mots_cles", []))
            blocs.append(f"ğŸ§ª **Analyse sÃ©mantique** : score {score:.2f}, mots clÃ©s : {mots}")

        if blocs:
            ctx["response"] = "\n\n".join(blocs)
            ctx.setdefault("plugins_log", []).append("PluginFusionMultiStrategique : rÃ©ponse enrichie combinÃ©e")
        else:
            ctx["response"] = "Aucune information stratÃ©gique disponible Ã  fusionner."
            ctx.setdefault("plugins_log", []).append("PluginFusionMultiStrategique : aucun bloc disponible")

        return ctx
