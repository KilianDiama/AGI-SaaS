"""
Plugin : journal_critique
R√¥le : Archiver les commentaires de la critique int√©rieure dans un journal structur√©
Priorit√© : 11
Auteur : AGI_Matt & GPT
"""

from noyau_core import BasePlugin, Context, Meta
import logging
from datetime import datetime

logger = logging.getLogger("plugin.journal_critique")

class JournalCritiquePlugin(BasePlugin):
    meta = Meta(
        name="journal_critique",
        priority=11,
        version="1.0",
        author="AGI_Matt & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        plugins_log = ctx.setdefault("plugins_log", [])
        critiques = ctx.get("critiques_internes", [])
        journal = ctx.setdefault("journal_critique", [])

        if not critiques:
            plugins_log.append("JournalCritiquePlugin : aucune critique √† archiver")
            return ctx

        # Ne garde que la derni√®re critique
        derni√®re = critiques[-1]
        entr√©e = {
            "date": derni√®re.get("date", datetime.utcnow().isoformat()),
            "signature": derni√®re.get("signature", "üëÅ Anonyme"),
            "ton": derni√®re.get("ton", "neutre"),
            "commentaire": derni√®re.get("commentaire", ""),
            "cible": derni√®re.get("cible", "[aucune r√©ponse]")
        }

        journal.append(entr√©e)
        ctx["journal_critique"] = journal
        plugins_log.append("JournalCritiquePlugin : critique archiv√©e")
        logger.info(f"[journal_critique] Entr√©e ajout√©e par {entr√©e['signature']}")

        return ctx
