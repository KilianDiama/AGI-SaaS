""" 
Plugin : exploration_externe  
R√¥le : Sugg√©rer une action ou recherche vers l‚Äôext√©rieur si besoin d‚Äôinfo d√©tect√©  
Priorit√© : 5.5 (apr√®s raisonnement, avant cr√©ation)  
Auteur : Matthieu & GPT  
"""

import logging
from noyau_core import BasePlugin, Context, Meta

logger = logging.getLogger("plugin.exploration_externe")

class ExplorationExternePlugin(BasePlugin):
    meta = Meta(
        name="exploration_externe",
        priority=5.5,
        version="1.1",  # ‚Üê mise √† jour de version
        author="Matthieu & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        plugins_log = ctx.setdefault("plugins_log", [])
        objectif = ctx.get("objectif", "")
        reponse = ctx.get("response", "")

        # S√©curit√© : v√©rifier que ce sont bien des cha√Ænes avant .lower()
        if not isinstance(objectif, str):
            objectif = str(objectif)
        if not isinstance(reponse, str):
            reponse = str(reponse)

        objectif = objectif.lower()
        reponse = reponse.lower()

        mots_cl√©s = ["inconnu", "non d√©fini", "√† chercher", "besoin", "?"]
        manque_detecte = any(mot in objectif for mot in mots_cl√©s) or any(mot in reponse for mot in mots_cl√©s)

        if not manque_detecte:
            plugins_log.append("ExplorationExternePlugin : pas de besoin d‚Äôexploration d√©tect√©.")
            return ctx

        suggestion = (
            "üîç Suggestion d'exploration :\n"
            "‚Üí Interroger une source externe (API, site, documentation) pour compl√©ter l'information.\n"
            f"Objectif : ¬´ {objectif[:60]}... ¬ª"
        )

        ctx["exploration_suggeree"] = suggestion
        if not ctx.get("response"):
            ctx["response"] = suggestion

        plugins_log.append("ExplorationExternePlugin : exploration externe sugg√©r√©e.")
        logger.info("[exploration_externe] Suggestion inject√©e.")

        return ctx
