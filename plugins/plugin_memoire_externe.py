"""
Plugin : memoire_externe
R√¥le : Interroger une base de souvenirs ou documents locaux pour enrichir sa r√©ponse
Priorit√© : 2 (juste apr√®s la r√©cup√©ration m√©moire standard)
Auteur : AGI_Matt & GPT
"""

from noyau_core import BasePlugin, Context, Meta
import logging
import difflib

logger = logging.getLogger("plugin.memoire_externe")

class MemoireExternePlugin(BasePlugin):
    meta = Meta(
        name="memoire_externe",
        priority=2,
        version="1.0",
        author="AGI_Matt & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        plugins_log = ctx.setdefault("plugins_log", [])

        # Corpus simul√© : une base de textes externes (√† √©tendre par fichier ou API r√©elle)
        corpus = ctx.get("base_connaissance_externe", [
            "L‚Äôintelligence artificielle est une simulation d‚Äôintelligence humaine.",
            "La m√©moire vectorielle permet la recherche s√©mantique par similarit√©.",
            "Un agent cognitif peut √™tre modulaire, r√©flexif et extensible.",
            "Les LLM peuvent g√©n√©rer mais aussi synth√©tiser et corriger.",
            "La conscience d‚Äôun syst√®me peut √©merger par r√©currence de processus auto-r√©f√©rents."
        ])

        message = ctx.get("user_message", "") or ctx.get("objectif", {}).get("but", "")

        if not message:
            ctx["memoire_externe"] = "üîç Aucun message ou objectif √† enrichir."
            plugins_log.append("MemoireExternePlugin : input vide")
            return ctx

        # Recherche simple par similarit√© de cha√Ænes
        extraits = difflib.get_close_matches(message, corpus, n=3, cutoff=0.2)

        if extraits:
            ctx["memoire_externe"] = f"üìö Infos externes li√©es :\n" + "\n".join(f"‚Ä¢ {e}" for e in extraits)
            plugins_log.append(f"MemoireExternePlugin : {len(extraits)} extraits pertinents trouv√©s")
        else:
            ctx["memoire_externe"] = "‚ùå Aucun extrait externe pertinent trouv√©."
            plugins_log.append("MemoireExternePlugin : corpus non utile")

        logger.info("[memoire_externe] R√©sultat int√©gr√©")

        return ctx
