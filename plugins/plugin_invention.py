""" 
Plugin : invention  
R√¥le : G√©n√©rer une invention ou id√©e originale bas√©e sur la m√©moire, l'objectif et la r√©flexion interne  
Priorit√© : 5.5 (juste apr√®s fusion, avant auto-√©valuation)  
Auteur : Matthieu & GPT  
"""

import logging
import os
import json
import random
from datetime import datetime
from noyau_core import BasePlugin, Context, Meta

logger = logging.getLogger("plugin.invention")

class InventionPlugin(BasePlugin):
    meta = Meta(
        name="invention",
        priority=5.5,
        version="1.1",  # ‚Üê version corrig√©e
        author="Matthieu & GPT"
    )

    MEMOIRE_PATH = "data/memoire_long_terme.json"

    def charger_memoire(self):
        if os.path.exists(self.MEMOIRE_PATH):
            try:
                with open(self.MEMOIRE_PATH, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    return data if isinstance(data, list) else []
            except Exception as e:
                logger.warning(f"[invention] Erreur lecture m√©moire : {e}")
        return []

    def normaliser_objectif(self, obj):
        if isinstance(obj, dict):
            return str(obj.get("but", "")).strip()
        return str(obj).strip()

    async def run(self, ctx: Context) -> Context:
        plugins_log = ctx.setdefault("plugins_log", [])

        objectif_raw = ctx.get("objectif", "")
        objectif = self.normaliser_objectif(objectif_raw)

        base_reflexion = ctx.get("reflexion_interne", "")
        memoire = self.charger_memoire()
        inspiration = "une exp√©rience pass√©e"

        if memoire and isinstance(memoire, list):
            item = random.choice(memoire)
            if isinstance(item, dict):
                inspiration = item.get("objectif", inspiration)

        invention = (
            f"√Ä partir de {inspiration}, je propose une id√©e originale :\n"
            f"üí° Invention : Un module qui s'auto-√©value en temps r√©el pendant l'√©laboration de sa r√©ponse.\n"
            f"Cela permettrait √† l'IA de d√©tecter des contradictions ou manques de clart√© avant m√™me de finaliser sa r√©ponse."
        )

        ctx["idee_inventee"] = invention
        if not ctx.get("response"):
            ctx["response"] = invention

        plugins_log.append("InventionPlugin : id√©e/invention g√©n√©r√©e.")
        logger.info(f"[invention] Id√©e invent√©e : {invention[:80]}...")

        return ctx
