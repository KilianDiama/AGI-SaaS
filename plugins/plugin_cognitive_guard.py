import logging
from noyau_core import BasePlugin, Context, Meta

logger = logging.getLogger("plugin.cognitive_guard")

class PluginCognitiveGuard(BasePlugin):
    meta = Meta(
        name="plugin_cognitive_guard",
        version="1.0",
        priority=4.7,  # Juste avant le fusionneur et l'optimizer
        author="Toi & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        response = ctx.get("llm_response") or ctx.get("llm_response_vot√©e") or ""
        logs = ctx.setdefault("plugins_log", [])

        # Simulations simples de d√©tection logique
        alerts = []

        if "je ne sais pas" in response.lower() and "voici la r√©ponse" in response.lower():
            alerts.append("üîÑ Contradiction : incertitude exprim√©e suivie d'une affirmation.")

        if any(p in response.lower() for p in ["certain", "toujours", "jamais"]) and "peut-√™tre" in response.lower():
            alerts.append("üåÄ Possible biais d‚Äôoverconfiance m√™l√© √† de l‚Äôincertitude.")

        if response.count("donc") >= 3 and response.count("car") == 0:
            alerts.append("üîÅ Raisonnement circulaire possible (beaucoup de 'donc' sans justification).")

        if "erreur" in response.lower() and "corrig√©" not in response.lower():
            alerts.append("‚ö†Ô∏è Mention d'erreur sans correction propos√©e.")

        # R√©sultat final
        if alerts:
            ctx["cognitive_warnings"] = alerts
            logs.append(f"PluginCognitiveGuard : {len(alerts)} incoh√©rences d√©tect√©es.")
            logger.warning("[cognitive_guard] Incoh√©rences d√©tect√©es :\n" + "\n".join(alerts))
        else:
            ctx["cognitive_warnings"] = []
            logs.append("PluginCognitiveGuard : aucune incoh√©rence d√©tect√©e.")
            logger.info("[cognitive_guard] Pas d‚Äôanomalies d√©tect√©es.")

        return ctx
