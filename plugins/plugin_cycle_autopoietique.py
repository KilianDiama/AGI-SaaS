"""
Plugin : cycle_autopoietique
R√¥le : Automatiser un cycle d‚Äôauto-observation, d‚Äôanalyse, et de proposition d‚Äô√©volution
Priorit√© : 28
Auteur : AGI_Matt & GPT
"""

from noyau_core import BasePlugin, Context, Meta
from datetime import datetime
import logging

logger = logging.getLogger("plugin.cycle_autopoietique")

class CycleAutopoietiquePlugin(BasePlugin):
    meta = Meta(
        name="cycle_autopoietique",
        priority=28,
        version="1.0",
        author="AGI_Matt & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        plugins_log = ctx.setdefault("plugins_log", [])
        archive = ctx.get("feedback_archive", [])
        suggestions = ctx.setdefault("propositions_√©volution", [])

        if not archive:
            ctx["cycle_autopoietique"] = "üì≠ Aucun cycle pr√©c√©dent. En attente d‚Äôobservations futures."
            return ctx

        dernier = archive[-1]
        id√©e_plugin = {
            "nom": f"plugin_evolution_{len(suggestions)+1}",
            "objectif": "Mieux r√©agir aux contextes √©motionnels complexes",
            "structure_sugg√©r√©e": {
                "d√©tecteur": "analyse le ton de la question",
                "r√©ponse_adapt√©e": "modifie le style selon le contexte",
                "historique_affectif": "enregistre l‚Äôintensit√© √©motionnelle"
            },
            "proposition_code": "# Plugin prototype √† g√©n√©rer au prochain cycle"
        }

        suggestions.append({
            "date": datetime.utcnow().isoformat(),
            "r√©sum√©_du_cycle": {
                "input": dernier.get("input", ""),
                "r√©ponse": dernier.get("r√©ponse", ""),
                "critique": dernier.get("critique", ""),
            },
            "√©volution_propos√©e": id√©e_plugin
        })

        ctx["propositions_√©volution"] = suggestions
        ctx["cycle_autopoietique"] = (
            f"üîÑ Cycle auto-√©valu√©.\n"
            f"‚Üí Prochaine extension sugg√©r√©e : `{id√©e_plugin['nom']}`\n"
            f"Objectif : {id√©e_plugin['objectif']}\n"
            f"(stock√©e pour traitement futur)"
        )

        plugins_log.append("CycleAutopoietiquePlugin : nouvelle √©volution propos√©e")
        logger.info("[cycle_autopoietique] Nouveau plugin propos√©")

        return ctx
