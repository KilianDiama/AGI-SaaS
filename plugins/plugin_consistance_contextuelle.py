# plugins/plugin_consistance_contextuelle.py

"""
Plugin : plugin_consistance_contextuelle
R√¥le : V√©rifier et am√©liorer la coh√©rence entre les messages pass√©s et la r√©ponse actuelle
Priorit√© : 2.3 (apr√®s m√©moire et raisonnement, avant g√©n√©ration finale)
Auteur : Toi & GPT
"""

from noyau_core import BasePlugin, Context, Meta
import logging

logger = logging.getLogger("plugin.consistance_contextuelle")

class PluginConsistanceContextuelle(BasePlugin):
    meta = Meta(
        name="plugin_consistance_contextuelle",
        priority=2.3,
        version="1.0",
        author="Toi & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        historique = ctx.get("history", [])
        r√©ponse = ctx.get("llm_response", "")
        feedbacks = []

        if not historique or not r√©ponse:
            ctx.setdefault("plugins_log", []).append("plugin_consistance_contextuelle : donn√©es insuffisantes")
            return ctx

        # Analyse simple de rupture de sujet
        dernier_msg = historique[-1].get("message", "").strip().lower()
        if dernier_msg and len(dernier_msg) > 15 and dernier_msg[:7] != r√©ponse[:7].lower():
            feedbacks.append("üîÅ La r√©ponse semble d√©connect√©e du dernier message.")

        # V√©rifie la coh√©rence avec le r√©sum√© m√©moire
        r√©sum√© = ctx.get("memoire_contextuelle", "")
        if r√©sum√© and r√©sum√© not in r√©ponse:
            feedbacks.append("üìå Le r√©sum√© contextuel n'est pas r√©utilis√© dans la r√©ponse.")

        if feedbacks:
            ctx["consistance_feedback"] = "\n".join(feedbacks)
            ctx.setdefault("plugins_log", []).append("plugin_consistance_contextuelle : coh√©rence partielle")
            logger.info(f"[consistance] Feedback :\n{ctx['consistance_feedback']}")
        else:
            ctx.setdefault("plugins_log", []).append("plugin_consistance_contextuelle : OK")

        return ctx
