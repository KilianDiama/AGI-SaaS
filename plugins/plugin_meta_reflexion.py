# plugins/plugin_meta_reflexion.py

import logging
from noyau_core import BasePlugin, Context, Meta

logger = logging.getLogger("plugin.meta_reflexion")

class PluginMetaReflexion(BasePlugin):
    meta = Meta(
        name="plugin_meta_reflexion",
        version="1.1",  # ‚Üê version corrig√©e
        author="Toi & GPT",
        priority=3.6
    )

    def __init__(self):
        self.nom = "plugin_meta_reflexion"

    async def run(self, ctx: Context) -> Context:
        historique = ctx.get("historique_execution", [])
        log = ctx.setdefault("plugins_log", [])

        # V√©rification du type de l‚Äôhistorique
        if not isinstance(historique, list):
            log.append(f"{self.nom} : format invalide pour historique_execution.")
            ctx["meta_reflexion"] = "‚ö†Ô∏è Historique d'ex√©cution illisible ou corrompu."
            return ctx

        # Extraction des erreurs
        erreurs = [
            e for e in historique
            if isinstance(e, dict) and e.get("status") == "√©chec"
        ]

        reflexions = []
        for erreur in erreurs:
            cause = str(erreur.get("cause", "non sp√©cifi√©e"))
            etape = str(erreur.get("√©tape", "inconnue"))
            reflexions.append(f"üß† √âchec d√©tect√© √† l‚Äô√©tape ¬´ {etape} ¬ª. Cause probable : {cause}.")

        # Injection dans le contexte
        if reflexions:
            ctx["meta_reflexion"] = "\n".join(reflexions)
            log.append(f"{self.nom} : r√©flexions g√©n√©r√©es ({len(reflexions)}).")
        else:
            ctx["meta_reflexion"] = "‚úÖ Aucun √©chec d√©tect√© r√©cemment."
            log.append(f"{self.nom} : rien √† signaler.")

        return ctx
