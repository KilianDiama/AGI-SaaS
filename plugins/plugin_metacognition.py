from noyau_core import BasePlugin, Context, Meta
import logging
from datetime import datetime

logger = logging.getLogger("plugin.metacognition")

class PluginMetacognition(BasePlugin):
    meta = Meta(
        name="plugin_metacognition",
        priority=4.8,  # Juste avant la r√©ponse finale
        version="1.0",
        author="Toi & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        log = ctx.setdefault("plugins_log", [])
        response = ctx.get("response", "")
        note = ctx.get("evaluation_reponse", {}).get("note", 0)
        objectif = ctx.get("objectif", {}).get("but", "inconnu")
        intention = ctx.get("intention", "non d√©finie")

        reflexion = []

        # Analyse qualit√© de la r√©ponse
        if note < 2:
            reflexion.append("‚ö†Ô∏è La r√©ponse g√©n√©r√©e semble peu satisfaisante.")
        elif note >= 4:
            reflexion.append("‚úÖ R√©ponse jug√©e pertinente et compl√®te.")

        # Auto-√©valuation des √©tapes de pens√©e
        if "raisonneur" not in ctx.get("composition_dynamique", []):
            reflexion.append("‚ùì Raisonneur non activ√© : v√©rifier si utile pour cet objectif.")
        if not ctx.get("llm_response"):
            reflexion.append("‚õî Aucune r√©ponse directe du LLM n‚Äôa √©t√© fournie.")
        if ctx.get("reflexion_interne"):
            reflexion.append("üß† Une r√©flexion interne a bien √©t√© r√©alis√©e.")

        # Synth√®se
        message = f"üß© **Auto-√©valuation du cycle**\n" \
                  f"- Intention : {intention}\n" \
                  f"- Objectif : {objectif}\n" \
                  f"- Note de r√©ponse : {note}/5\n\n" \
                  f"Commentaires :\n" + "\n".join(reflexion)

        ctx["meta_reflexion"] = message
        log.append("PluginMetacognition : r√©flexion m√©tacognitive inject√©e.")
        logger.info("[metacognition] Auto-√©valuation r√©alis√©e.")

        return ctx
