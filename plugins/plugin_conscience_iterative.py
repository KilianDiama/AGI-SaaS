# plugins/plugin_conscience_iterative.py
from noyau_core import BasePlugin, Context, Meta
import logging

logger = logging.getLogger("plugin.conscience_iterative")

class PluginConscienceIterative(BasePlugin):
    meta = Meta(
        name="plugin_conscience_iterative",
        version="1.0",
        priority=98.2,
        author="Toi & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        last_response = ctx.get("llm_response", "").strip()
        plan = ctx.get("plan", [])
        reflexions = ctx.get("reflexions_creatives", [])

        conscience = {
            "r√©ponse_vide": last_response == "",
            "r√©ponse_trop_courte": len(last_response) < 30,
            "r√©ponse_confuse": any(word in last_response.lower() for word in ["je ne sais pas", "d√©sol√©", "aucune id√©e"]),
            "√©tapes_incompl√®tes": any(etape.get("status") != "termin√©" for etape in plan),
            "besoin_reformulation": False
        }

        # Auto-√©valuation
        verdicts = []
        if conscience["r√©ponse_vide"]:
            verdicts.append("‚ö†Ô∏è R√©ponse absente.")
        if conscience["r√©ponse_trop_courte"]:
            verdicts.append("üü° R√©ponse br√®ve.")
        if conscience["r√©ponse_confuse"]:
            verdicts.append("üî¥ R√©ponse confuse ou incompl√®te.")
        if conscience["√©tapes_incompl√®tes"]:
            verdicts.append("‚è≥ Plan non termin√©.")
        if reflexions:
            verdicts.append("‚úÖ Cr√©ativit√© utilis√©e.")

        bilan = "\n".join(verdicts) or "‚úÖ Rien √† signaler. Cycle coh√©rent."

        ctx["conscience_iterative"] = {
            "analyse": conscience,
            "bilan": bilan
        }

        ctx.setdefault("plugins_log", []).append("PluginConscienceIterative : auto-√©valuation du cycle.")
        return ctx
