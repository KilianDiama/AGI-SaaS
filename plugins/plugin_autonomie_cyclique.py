""" 
Plugin : autonomie_cyclique  
R√¥le : G√©n√©rer un nouvel objectif √† partir du raisonnement pr√©c√©dent  
Priorit√© : 8.5 (apr√®s toute la cha√Æne cognitive)  
Auteur : Matthieu & GPT  
"""

import logging
import random
from noyau_core import BasePlugin, Context, Meta

logger = logging.getLogger("plugin.autonomie_cyclique")

class AutonomieCycliquePlugin(BasePlugin):
    meta = Meta(
        name="autonomie_cyclique",
        priority=8.5,
        version="1.0",
        author="Matthieu & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        plugins_log = ctx.setdefault("plugins_log", [])

        base = ctx.get("projection_futuriste") or ctx.get("plan_autonome") or ctx.get("objectif", "")
        if not base:
            plugins_log.append("AutonomieCycliquePlugin : pas de mati√®re pour rebond.")
            return ctx

        amorces = [
            "Approfondir l'id√©e suivante : ",
            "Explorer une extension logique de : ",
            "Tester un cas r√©el de : ",
            "Imaginer une version am√©lior√©e de : ",
            "Appliquer ce concept √† une autre situation : "
        ]
        nouveau = f"{random.choice(amorces)}{base[:80]}..."

        ctx["objectif_autonome_suivant"] = nouveau
        if not ctx.get("response"):
            ctx["response"] = f"üß≠ Objectif suivant g√©n√©r√© automatiquement :\n{nouveau}"

        plugins_log.append("AutonomieCycliquePlugin : objectif auto-g√©n√©r√©.")
        logger.info("[autonomie_cyclique] Objectif suivant pr√™t.")

        return ctx
