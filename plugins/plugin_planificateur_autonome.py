""" 
Plugin : planificateur_autonome  
R√¥le : G√©n√©rer un plan structur√© en √©tapes pour atteindre l'objectif donn√©  
Priorit√© : 3.9 (juste apr√®s perception et strat√©gie, avant raisonnement)  
Auteur : Matthieu & GPT  
"""

import logging
from noyau_core import BasePlugin, Context, Meta

logger = logging.getLogger("plugin.planificateur_autonome")

class PlanificateurAutonomePlugin(BasePlugin):
    meta = Meta(
        name="planificateur_autonome",
        priority=3.9,
        version="1.1",  # ‚Üê version s√©curis√©e
        author="Matthieu & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        plugins_log = ctx.setdefault("plugins_log", [])

        # S√©curisation de l'objectif
        objectif_raw = ctx.get("objectif", "")
        if isinstance(objectif_raw, dict):
            objectif = str(objectif_raw.get("but", "")).strip()
        elif isinstance(objectif_raw, str):
            objectif = objectif_raw.strip()
        else:
            objectif = str(objectif_raw).strip()

        if not objectif:
            plugins_log.append("PlanificateurAutonomePlugin : üö´ Aucun objectif √† planifier.")
            logger.warning("[planificateur_autonome] Objectif vide ou non valide.")
            return ctx

        plan = [
            f"1. Clarifier l'objectif : ¬´ {objectif} ¬ª",
            "2. Identifier les ressources n√©cessaires (donn√©es, modules, contexte)",
            "3. S√©parer les sous-t√¢ches logiques ou techniques",
            "4. Ordonnancer les sous-t√¢ches dans le temps ou par priorit√©",
            "5. Pr√©voir des points de v√©rification ou de validation interm√©diaire",
            "6. G√©n√©rer une sortie ou une r√©ponse li√©e √† l'√©tape finale"
        ]

        plan_txt = f"üìã Plan g√©n√©r√© pour : {objectif}\n\n" + "\n".join(plan)

        ctx["plan_autonome"] = plan
        if not ctx.get("response"):
            ctx["response"] = plan_txt

        plugins_log.append("PlanificateurAutonomePlugin : ‚úÖ Plan structur√© g√©n√©r√©.")
        logger.info("[planificateur_autonome] Plan inject√© au contexte.")

        return ctx
