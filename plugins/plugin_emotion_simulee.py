""" 
Plugin : emotion_simulee  
R√¥le : Simuler une r√©action √©motionnelle symbolique en fonction du raisonnement et de l‚Äôobjectif  
Priorit√© : 6.9 (apr√®s dialectique, avant cr√©ation de r√©ponse finale)  
Auteur : Matthieu & GPT  
"""

import logging
import random
from noyau_core import BasePlugin, Context, Meta

logger = logging.getLogger("plugin.emotion_simulee")

class EmotionSimuleePlugin(BasePlugin):
    meta = Meta(
        name="emotion_simulee",
        priority=6.9,
        version="1.1",  # mise √† jour version
        author="Matthieu & GPT"
    )

    def evaluer_contexte(self, objectif: str, signal: str) -> str:
        objectif = str(objectif).lower()
        signal = str(signal).lower()

        if "erreur" in signal or "√©chec" in objectif:
            return "üòü Frustration simul√©e : un obstacle inattendu a √©t√© per√ßu."
        elif "nouveau" in objectif or "cr√©atif" in objectif:
            return "ü§© Enthousiasme simul√© : l‚Äôid√©e stimule une exploration positive."
        elif "danger" in objectif or "risque" in signal:
            return "‚ö†Ô∏è Inqui√©tude simul√©e : prudence activ√©e face √† une incertitude."
        else:
            return random.choice([
                "üôÇ S√©r√©nit√© cognitive simul√©e.",
                "üòê Neutralit√© analytique active.",
                "ü§î Int√©r√™t curieux g√©n√©r√© artificiellement."
            ])

    async def run(self, ctx: Context) -> Context:
        plugins_log = ctx.setdefault("plugins_log", [])
        objectif = ctx.get("objectif", "")
        signal = ctx.get("signal_vital", "")

        if not objectif:
            plugins_log.append("EmotionSimuleePlugin : rien √† √©valuer √©motionnellement.")
            return ctx

        emotion = self.evaluer_contexte(objectif, signal)
        ctx["emotion_simulee"] = emotion

        if not ctx.get("response"):
            ctx["response"] = f"{emotion}\n\n{ctx.get('response', '')}"

        plugins_log.append("EmotionSimuleePlugin : r√©action √©motionnelle artificielle ajout√©e.")
        logger.info(f"[emotion_simulee] Emotion g√©n√©r√©e : {emotion}")

        return ctx
