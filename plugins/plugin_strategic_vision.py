from noyau_core import BasePlugin, Context, Meta
import logging

logger = logging.getLogger("plugin.strategic_vision")

class PluginStrategicVision(BasePlugin):
    meta = Meta(
        name="plugin_strategic_vision",
        version="1.0",
        priority=1.7,  # Apr√®s analyse intention, avant planification
        author="Toi & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        objectif = ctx.get("objectif", {}).get("but", "").strip().lower()
        plan = ctx.get("plan", [])
        messages = []

        # V√©rifie si le plan est vide ou sans lien avec l'objectif
        if not plan:
            messages.append("‚ö†Ô∏è Aucun plan d√©tect√© pour l‚Äôobjectif ‚Üí risque de stagnation.")
            plan = self.suggere_plan_par_defaut(objectif)
            ctx["plan"] = plan
            messages.append(f"üß† Nouveau plan inject√© ({len(plan)} √©tapes).")

        # V√©rifie si toutes les √©tapes sont "√† faire" ou "en pause"
        if all(etape.get("status", "") in ("√† faire", "en pause") for etape in plan):
            messages.append("‚è∏Ô∏è Plan inactif d√©tect√© ‚Üí proposer un red√©marrage cibl√©.")
            ctx["tache_courante"] = plan[0]["√©tape"] if plan else "r√©flexion strat√©gique"

        # Analyse s√©mantique de l‚Äôobjectif
        if "question" in objectif or "informer" in objectif:
            messages.append("üéØ Objectif = information ‚Üí planification l√©g√®re recommand√©e.")
        elif "r√©soudre" in objectif or "probl√®me" in objectif:
            messages.append("üîß Objectif = r√©solution ‚Üí plan structur√© essentiel.")

        ctx["vision_strat√©gique"] = "\n".join(messages)
        ctx.setdefault("plugins_log", []).append("plugin_strategic_vision : diagnostic plan r√©alis√©.")
        logger.info(f"[vision] Diagnostic strat√©gique :\n{ctx['vision_strat√©gique']}")

        return ctx

    def suggere_plan_par_defaut(self, objectif: str):
        if "question" in objectif:
            return [
                {"√©tape": "identifier le sujet", "status": "√† faire"},
                {"√©tape": "extraire les infos pertinentes", "status": "√† faire"},
                {"√©tape": "formuler une r√©ponse claire", "status": "√† faire"}
            ]
        elif "r√©soudre" in objectif:
            return [
                {"√©tape": "analyser le probl√®me", "status": "√† faire"},
                {"√©tape": "√©valuer les solutions", "status": "√† faire"},
                {"√©tape": "ex√©cuter la solution retenue", "status": "√† faire"}
            ]
        else:
            return [
                {"√©tape": "clarifier l‚Äôintention", "status": "√† faire"},
                {"√©tape": "proposer une direction", "status": "√† faire"}
            ]
