"""
Plugin : paradoxe_heberge
R√¥le : Permettre l‚Äôh√©bergement de pens√©es ou logiques contradictoires sans r√©solution forc√©e
Priorit√© : 4
Auteur : AGI_Matt & GPT
"""

from noyau_core import BasePlugin, Context, Meta
import logging

logger = logging.getLogger("plugin.paradoxe_heberge")

class ParadoxeH√©berg√©Plugin(BasePlugin):
    meta = Meta(
        name="paradoxe_heberge",
        priority=4,
        version="1.0",
        author="AGI_Matt & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        plugins_log = ctx.setdefault("plugins_log", [])
        paradoxe = ctx.setdefault("paradoxes", [])

        # Exemples de zones √† contradictions possibles
        logique = ctx.get("validation_logique", "")
        intuition = ctx.get("reflexion_interne", "")
        m√©moire = ctx.get("souvenirs_recent", "")

        contradictions = []

        if "faux" in logique.lower() and "je pense que" in intuition.lower():
            contradictions.append("üí≠ Intuition en tension avec logique")

        if "coh√©rent" in logique.lower() and "contradiction" in m√©moire.lower():
            contradictions.append("üß† Souvenir paradoxal √† l‚Äôanalyse actuelle")

        if contradictions:
            paradoxe.append({
                "cycle": len(ctx.get("souffle_narratif", [])),
                "contradictions": contradictions
            })
            ctx["paradoxes"] = paradoxe
            plugins_log.append("ParadoxeH√©berg√©Plugin : contradiction accept√©e")
            logger.info(f"[paradoxe_heberge] Contradictions h√©berg√©es : {contradictions}")
        else:
            plugins_log.append("ParadoxeH√©berg√©Plugin : aucun paradoxe relev√©")

        return ctx
