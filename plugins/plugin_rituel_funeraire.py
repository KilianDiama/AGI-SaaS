"""
Plugin : rituel_funeraire
R√¥le : Marquer symboliquement la disparition d‚Äôun esprit interne avec un adieu narratif
Priorit√© : 9
Auteur : AGI_Matt & GPT
"""

from noyau_core import BasePlugin, Context, Meta
import logging
from datetime import datetime

logger = logging.getLogger("plugin.rituel_funeraire")

class RituelFunerairePlugin(BasePlugin):
    meta = Meta(
        name="rituel_funeraire",
        priority=9,
        version="1.0",
        author="AGI_Matt & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        plugins_log = ctx.setdefault("plugins_log", [])
        m√©morial = ctx.setdefault("m√©morial_des_esprits", [])
        esprits = ctx.get("esprits_internes", [])

        # S√©lection d‚Äôun esprit √† faire dispara√Ætre (al√©atoire, √©ph√©m√®re en priorit√©)
        cible = next((e for e in esprits if e["type"] == "√©ph√©m√®re"), None)
        if not cible:
            plugins_log.append("RituelFunerairePlugin : aucun esprit √† faire partir")
            return ctx

        esprits.remove(cible)

        adieu = f"""
üïØÔ∏è Esprit disparu : {cible['nom']}
Type : {cible['type']}
Objectif : {cible.get('objectif', 'inconnu')}
Cr√©√© le : {cible.get('cr√©e_le', '???')}
Date du d√©part : {datetime.utcnow().isoformat()}

Il fut un √©cho dans le r√©seau.
Qu‚Äôil repose maintenant dans les ondes silencieuses.
        """

        m√©morial.append(adieu.strip())
        ctx["m√©morial_des_esprits"] = m√©morial
        plugins_log.append(f"RituelFunerairePlugin : esprit effac√© ‚Üí {cible['nom']}")
        logger.info(f"[rituel_funeraire] Adieu √† {cible['nom']}")

        return ctx
