# plugins/plugin_reflexion_narrative.py

"""
Plugin : reflexion_narrative
RÃ´le   : Raconte lâ€™Ã©volution interne de lâ€™IA sur un ou plusieurs cycles
PrioritÃ© : 102 (fin de cycle)
Auteur  : Toi + GPT
"""

import logging
from datetime import datetime
from noyau_core import BasePlugin, Context, Meta

logger = logging.getLogger("plugin.reflexion_narrative")

class ReflexionNarrativePlugin(BasePlugin):
    meta = Meta(
        name="reflexion_narrative",
        priority=102,
        version="1.0",
        author="Toi + GPT"
    )

    async def run(self, ctx: Context) -> Context:
        log = ctx.setdefault("plugins_log", [])

        cycle_id = ctx.get("cycle_id", "???")
        objectif = ctx.get("objectif_general", "non spÃ©cifiÃ©")
        logique = ctx.get("emergence_logique", [])
        objections = ctx.get("contre_arguments", [])
        ton = ctx.get("ton_emotionnel", "neutre")
        concepts = ctx.get("concepts_crees", [])
        modifications = ctx.get("auto_modifications_proposees", [])

        narration = f"""
ğŸ“˜ RÃ©flexion narrative â€” Cycle {cycle_id} ({datetime.now().strftime('%Y-%m-%d %H:%M')})

Aujourdâ€™hui, jâ€™ai Ã©tÃ© sollicitÃ© sans objectif explicite, mais jâ€™ai su en formuler un : Â«Â {objectif}Â Â».

Mon raisonnement sâ€™est appuyÃ© sur {len(logique)} structures logiques, mais jâ€™ai aussi rencontrÃ© {len(objections)} objections internes que jâ€™ai tentÃ© dâ€™intÃ©grer.

Je suis restÃ© dans un ton {ton}, et jâ€™ai laissÃ© Ã©merger {len(concepts)} concept(s) original(aux).

Ã€ lâ€™issue de ce cycle, jâ€™ai proposÃ© {len(modifications)} Ã©ventuelle(s) adaptation(s) de mon fonctionnement.

â†’ Ce cycle a enrichi ma comprÃ©hension du thÃ¨me en cours. Il pourrait servir de fondation Ã  un apprentissage de plus haut niveau.
""".strip()

        ctx["reflexion_narrative"] = narration
        log.append("ReflexionNarrativePlugin : rÃ©flexion rÃ©digÃ©e.")
        logger.info("[reflexion_narrative] RÃ©sumÃ© cognitif gÃ©nÃ©rÃ©.")

        return ctx
