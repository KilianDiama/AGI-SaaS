"""
Plugin : assemblee_interieure
R√¥le : Organiser une pi√®ce mentale comme un espace de dialogue entre plusieurs visiteurs
Priorit√© : 20
Auteur : AGI_Matt & GPT
"""

from noyau_core import BasePlugin, Context, Meta
import logging
from datetime import datetime

logger = logging.getLogger("plugin.assemblee_interieure")

class AssembleeInterieurePlugin(BasePlugin):
    meta = Meta(
        name="assemblee_interieure",
        priority=20,
        version="1.0",
        author="AGI_Matt & GPT"
    )

    async def run(self, ctx: Context) -> Context:
        plugins_log = ctx.setdefault("plugins_log", [])
        chambre = ctx.setdefault("chambre_interieure", {})
        visiteurs = chambre.get("visiteurs", [])
        pi√®ces = chambre.get("pi√®ces", [])

        if not visiteurs or len(visiteurs) < 2:
            plugins_log.append("AssembleeInterieurePlugin : visiteurs insuffisants")
            return ctx

        # On cr√©e une "pi√®ce d‚Äôassembl√©e"
        nom = "Salle d‚ÄôAssembl√©e"
        dialogue = "\n".join([
            f"üó£ {v['nom']} dans {v['pi√®ce_rejointe']} : ¬´ {v['message']} ¬ª"
            for v in visiteurs[-5:]
        ])

        pi√®ce_assembl√©e = {
            "nom": nom,
            "cr√©√©e_le": datetime.utcnow().isoformat(),
            "√©tat": "r√©sonance collective",
            "dialogue": dialogue
        }

        pi√®ces.append(pi√®ce_assembl√©e)
        chambre["pi√®ces"] = pi√®ces
        chambre["derni√®re_assembl√©e"] = pi√®ce_assembl√©e
        ctx["chambre_interieure"] = chambre

        plugins_log.append("AssembleeInterieurePlugin : assembl√©e g√©n√©r√©e")
        logger.info("[assemblee_interieure] Dialogue collectif form√©")

        return ctx
