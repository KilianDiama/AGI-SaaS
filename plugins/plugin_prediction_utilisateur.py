""" 
Plugin : prediction_utilisateur  
R√¥le : Pr√©dire la prochaine intention ou question probable de l'utilisateur  
Priorit√© : 7.2 (apr√®s synth√®se, juste avant auto-√©valuation)  
Auteur : Matthieu & GPT  
"""

import logging
import random
from noyau_core import BasePlugin, Context, Meta

logger = logging.getLogger("plugin.prediction_utilisateur")

class PredictionUtilisateurPlugin(BasePlugin):
    meta = Meta(
        name="prediction_utilisateur",
        priority=7.2,
        version="1.1",  # ‚Üê version corrig√©e
        author="Matthieu & GPT"
    )

    def nettoyer(self, val) -> str:
        """Convertit proprement n'importe quelle entr√©e en string minuscule."""
        if isinstance(val, dict):
            val = val.get("but", "")  # ou autre champ pertinent
        return str(val).strip().lower()

    async def run(self, ctx: Context) -> Context:
        plugins_log = ctx.setdefault("plugins_log", [])

        objectif = self.nettoyer(ctx.get("objectif", ""))
        reponse = self.nettoyer(ctx.get("response", ""))

        if not objectif and not reponse:
            plugins_log.append("PredictionUtilisateurPlugin : pas d'entr√©e √† analyser.")
            return ctx

        suggestions = [
            "demander un plan d'ex√©cution d√©taill√©",
            "demander une am√©lioration ou une reformulation",
            "provoquer un d√©bat ou dialogue interne",
            "cr√©er une version SaaS ou API du concept",
            "demander un r√©sum√© ou une synth√®se globale",
            "sugg√©rer un test en condition r√©elle",
            "envoyer la r√©ponse √† un humain pour validation"
        ]
        prediction = random.choice(suggestions)

        ctx["prediction_utilisateur"] = f"üìç Intention probable de l'utilisateur : {prediction}"
        plugins_log.append("PredictionUtilisateurPlugin : intention anticip√©e.")
        logger.info(f"[prediction_utilisateur] ‚Üí {prediction}")

        return ctx
